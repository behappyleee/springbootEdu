1. 빌드 관리 도구
                 - 빌드 관리 도구란 프로젝트에서 필요한 xml, properties, jar 파일들을 자동으로
                   인식하여 빌드해주는 도구
                 - 소스 코드를 컴파일, 테스트, 정적 분석 등을 하여 실행 가능한 앱으로 빌드를 해 줌
                 - 프로젝트 정보 관리, 테스트 빌드, 배포 등의 작업을 진행 해 줌
                 - 외부 라이브러리를 참조하여 자동으로 다운로드 및 업데이트의 관리를 해 줌
                 - 자바의 대표적인 빌드 도구 : Ant, Maven, Gradle

                 (1) Maven
                 자바의 대표적인 관리 도구 였던  Ant 를 대체하기 위해 개발 됨
                 프로젝트의 외부 라이브러리를 쉽게 참조할 수 있게 pom.xml 파일료 명시하여 관리
                 참조한 외부 라이브러리에 연관된 다른 라이브러리도 자동으로 관리됨

                 - Maven 사용 이유 : 기존에 사용하던 Ant 는 빌드의 기능만 가지고 있음
  자동으로 라이브러리를 관리해주는 기능이 추가 된 Maven 을 사용
  다운받아 사용하던 라이브러리에 변동 사항이 있으면 자동으로 업데이트 하여 적용이 됨

- Ant : XML 기반의 스크립트, 자유로운 빌드 단위 지정, 간단하고 사용하기 쉬음, 대규모 프로젝트에서 복잡해지는 경향이 있음, 라이프 사이클이 ㅇ벗음
- Maven : XML 기반의 스크립트, 라이브 사이클 도입, pom.xml 로 편하게 Dependency 관리

- Maven 간단 사용법 : pom.xml 파일을 활용하여 빌드 및 관리
- pom.xml 의 역할 : (1) 프로젝트 정보 관리 (2) 해당 프로젝트에서 사용하는 외부 라이브러리 관리 (3) 해당 프로젝트의 빌드 관련 설정

(2) Maven Tag
- modelVersion : maven 버전을 의미
- groupId : 프로젝트 그룹 id 를 뜻하며, 일반적으로 대표하는 사이트 도메인을 역순으로 적어 사용
- artifactId : groupId 외 에 다른 프로젝트와는 구분될 수 있는 프로젝트의 id 를 작성
- version : 프로젝트의 버전을 의미하며 개발 단계에 따라 구분하여 작성
- name : 프로젝트의 이름
- description : 해당 프로젝트의 간략한 설명을 작성
- properties : pom.xml 파일 내에서 빈번하게 사용되는 중복 상수를 정의하는 영역
                해당 영역의 상수를 사용하기 위해서는 ${태그명} 의 형태로 사용하면 됨
- dependencies : 해당 프로젝트에서 의존성을 가지고 사용하는 라이브러리를 정의하는 영영
                  각 라이브러리마다 <dependency> 태그를 사용하여 구분
- build : 프로젝트 빌드와 관련된 정보를 설정하는 영역

(3) Gradle
- Groovy 스크립트를 활용한 빌드 관리 도구
- 안드로이드 프로젝트의 표준 빌드 시스템으로 채택
- 멀티 프로젝트 (Multi-Project) 의 빌드에 최적화 하여 설계됨
- Maven 에 비해 더 빠른 처리속도를 가지고 있음
- Meven 에 비해 더 간결한 구성이 가능

(4) Gradle 과 Maven 비교
- Gradle 에 비해 Maven 이 점유율이 더 높은 상황 (점차 Gradle 점유율 오르는 중)
- Gradle 에 비해 Maven의 성능이 떨어짐
- Maven 에 비해 Gradle아 대규모 프로젝트에서의 성능이 좋음
- Maven : pom.xml, Gradle : build.gradle
- Gradle 은 설치 없이 사용 할 수 있다. (Gradle Wrapper)

(5) Gradle 의 대표 용어
repositories : 라이브러리가 저장된 위치 등 설정
mavenCentral : 기본 Maven Repository
dependencies : 라이브러리 사용을 위한 의존성 설정

(6) 디자인 패턴 : 특정 문맥에서 공통 적으로 발생하는 문제에 대해 쓰이는 재사용 가능한 해결책
목적별로 일정한 패턴이 제시되어 있음
완전한 정답이 되는 알고리즘과 달리 현재 상황에 맞춰 최적화된 패턴을 결정하여 사용하는 것이 좋음
대표적으로 구체화된 디자인 패턴은 GoF (Gang of Four) 에서 제시한 총 23개의 패턴이 있음

(7) 디자인 패턴의 장점 : 개발자 간의 원활한 협업이 가능
소프트웨어의 구조를 파악하기 용이함, 재사용을 통해 개발 시간 단축, 설계 변경이 있을 경우 비교적 원할하게 조치가 가능

(8) 디자인 패턴의 단점 : 객체지향적 설계를 고려하여 진행해야 함
초기 투자 비용이 많이 들어감 (돈 뿐만 아니라 시간도 많이 들어감)

(9) 목적에 따른 분류 : 생성 패턴, 구조 패턴, 행동 패턴 등 총 3가지로 구분이 됨
각 패턴이 어떤 작업을 위해 생성되는 것인 지 에 따른 구분

- 생성 패턴 : 객체의 생성과 관련된 패턴, 특정 객체가 생성되거나 변경되어도 프로그램 구조에 영향을 최소화 할 수 있도록 유연성 제공
- 구조 패턴 : 프로그램 내 자료 구조나 인터페이스 구조 등 프로그램 구조를 설계하는데 사용되는 패턴, 클래스나 객체를 조합하여 다른 구조를 만들 수 있게 해 줌
- 행동 패턴 : 반복적으로 사용되는 객체들의 커뮤니케이션을 극대화, 객체 사이에 알고리즘 또는 책임을 분배하는 방법에 대해 정의됨, 결합도를 최소화 하는 것 이 목적

2. REST API

- API : Application Programming Interface 의 줄임말
        응용 프로그램에서 사용할 수 있도록 다른 응용 프로그램을 제어할 수 있게 만든 인터페이스를 뜻 함
        API 를 사용하면 내부 구현 로직을 알지 못해도 정의되어 있는 기능을 쉽게 사용할 수 있음
        여기서 인터페이스 (Interface) 란 어떤 장치 간 정보를 교환하기 위한 수단이나 방법을 의미
        대표적인 인터페이스로는 마우스, 키보드, 터치패드 (하드웨어 적인 느낌) 등 ...

- REST : Representation State Transfer 의 줄임말
         자원의 이름으로 구분하여 해당 자원(데이터를 의미) 의 상태를 교환 하는 것을 의미
         REST 는 서버와 클라이언트의 통신 방식 중 하나
         HTTP URI (Uniform Resource Identifier) 를 통해 자원을 명시하고 HTTP Method 를 통해 자원을 교환 하는 것
         HTTP Method (Create, Read, Update, Delete) --> CRUD

- REST 특징
- (1) Server-Client 구조 : 자원이 있는 쪽이 Server, 요청하는 쪽이 Client
                          클라이언트와 서버가 독립적으로 분리되어 있어야 함

- (2) Stateless : 요청 간에 클라이언트 정보가 서버에 저장되지 않음
                   서버는 각각의 요청을 완전히 별개의 것으로 인식하고 처리

- (3) Cacheable : HTTP 프로토콜을 그대로 사용하기 때문에 HTTP 특징인 캐싱 기능을 적용 대량의 요청을 효율적으로 처리하기 위해 캐시를 사용

- (4) 계층화 (Layered System) : 클라이언트는 서버의 구성과 상관없이 REST API 서버로 요청
 서버는 다중 계층으로 구성될 수 있음 (로드밸런싱, 보안 요소, 캐시 등)

- (5) Code on Demand (Optional) : 요청을 받으면 서버에서 클라이언트로 코드 또는 스크립트 (로직) 을 전달하여 클라이언트 기능 확장

- (6) 인터페이스 일관성 (Uniform Interface) 정보가 표준 형식으로 전송되기 위해 구성 요소간 통합 인터페이스를 제공
       HTTP 프로토콜을 따르는 모든 플랫폼에서 사용 가능하게  끔 설계

- REST 장점 : HTTP 표준 프로토콜을 사용하는 모든 플랫폼에서 호환이 가능, 서버와 클라이언트의 역할을 명화하게 분리
             여러 서비스 설계에서 생길 수 있는 문제를 최소화

- REST API : REST 아키텍처의 조건을 준수하는 어플리케이션 프로그래밍 인터페이스를 뜻 함
             최근 많은 API 가 REST API 로 제공하고 있음

- REST API 특징 : REST 기반으로 시스템을 분산하여 확장성과 재사용성을 높임, HTTP 표준을 따르고 있어 여러 프로그래밍 언어로 구현 할 수 있음

- REST API 설계 규칙
- (1) 웹 기반의 REST API 를 설계할 경우에는 URI 를 통해 자원을 표현
 https://thinkground.studion/member/589
 Resource : member, Resource id : 589

 - (2) 자원에 대한 조작은 HTTP Method (CRUD) 를 통해 표현해야 함
 URI 에 행위가 들어가면 안됨
 HEADER 를 통해 CRUD 를 표현하여 동작을 요청해야 함

 - (3) 메세지를 통한 리소스 조작
 HEADER 를 통해 (content-type) 을 지정하여 데이터를 전달
 대표적 형식으로는 HTML, XML, JSON, TEXT 가 있음

- (4) URI 에는 소문자를 사용 Resource 의 이름이나 URI 가 길어질 경우 하이픈(-) 을 통해 가독성을 높일 수 있음
      언더바는 사용하지 않음, 파일 확장자를 표현하지 않음

 - 3. MVC Pattern (Model View Controller)
      디자인 패턴 중 하나인 MVC 패턴은 Model View Controller 의 줄임말로 어플리케이션을 구성할 때
      그 구성 요소를 세 가지의 역할로 구분한 패턴을 의미

      사용자 인터페이스로부터 비즈니스 로직을 분리하여 서로 영향 없으 쉽게 고칠 수 있는 설계가 가능

- Controller : Model 과 View 사이에서 브릿지 역할을 수행
               앱의 사용자로부터 입력에 대한 응답으로 모델 및 뷰를 업데이트 하는 로직을 포함
               사용자의 요청은 모두 컨트롤러를 통해 진행 되어야 함

- RestController : Spring 4.0 이상 부터 사용이 가능 @Controller 에 @ResponseBody 가 결합된 어노테이션
                   컨트롤러 클래스 하위 메서드에 @ResponseBody 어노테이션을 붙이지 않아도 문자열과 JSON 등을 전송할 수 있음, View 를 거치지 않고 HTTP ResponseBody 에 직접 return 값을 보내게 됨


- Model : 데이터를 처리하는 영역, 데이터 베이스와 연동을 위한 DAO (Data Access Object) 와 데이터의 구조를 표현하는 DO(Data Object) 로 구성됨

- View : 데이터를 보여주는 화면 자체의 영역을 뜻 함
         사용자 인터페이스 요소들이 여기에 포함되며 데이터를 각 요소에 배치
                               뷰에서는 별도의 데이터를 보관하지 않음

                      - MVC Pattern 의 특징 : 어플리케이션의 역할을 세 구간으로 나누어 설계함 으로써 서로 간의 의존성이 낮아짐
                                             각 영영이 독립적으로 구성 되어 개발자 간 분업 및 협업이 원할
                                             한 영역을 업데이트 하더라도 다른 곳에 영향을 주지 않음

                      -- Client (Request) -> Dispatcher Servlet -> Handler Mapping -> Controller -> Message Converter -> HTTP Response -> Client

                      -- RequestMapping : MVC 의 Handler Mapping 을 위해서 DefaultAnnotationHandlerMapping 을 사용
                                          DefaultAnnotationHandlerMapping 맵핑 정보로 @RequestMapping 어노테이션을 활용
                    클래스와 메서드의 RequestMapping 을 통해 URL 을 맵핑하여 경로를 설정하여 해당 메서드에서 처리
                    value : URL 설정 , method : GET / POST / PUT / PATCH 등 지정
                    스프링 4.3 버전 이상 부터는 메서드를 지정하는 방식 보다는 해당 어노테이션을 사용 (@GetMapping / @PostMapping / @DeleteMapping / @PutMapping / @PatchMapping) 을 사용

-- PathVariable : GET 형식의 요청에서 파라미터를 전달하기 위해 URL 에 값을 담아 요청하는 방법
                  아래 방식은 @GetMapping 에서 사용 된 (변수) 의 이름과 메서드의 매개변수와 일치시켜야 함
                  ex ) @GetMapping(value = "/variable1/{variable}")
                       @Pathvariable 어노테이션을 사용하여 Mapping 주소에 있는 variable 값을 가져 옴
                       public String getVaraible1(@PathVariable String variable) {
                        return variable;
                       }

-- RequestParam : GET 형식의 요청에서 쿼리 문자열을 전달하기 위해 사용되는 방법
                  ? 를 기준으로 우측에 {키}={값} 의 형태로 전달되며, 복수 형태로 전달 할 경우 & 를 사용함

@GetMapping(value = "/request1" )
public String getRequestParam1(@RequestParam name, @RequestParam email, @Request organization) {
    return name + "" + email + "" + organization;
}

-- RequestParam 에서 어떤 쿼리 문자열을 가져올지 모를 시 Map 을 사용
@GetMapping(value ="/request1")
public String getRequestParam1(@RequestParam Map<String, Object> param) {
     StringBuilder sb = new StringBuilder();
     param.entrySet().forEach(map -> {
        sb.append(map.getKey() + " : " + map.getValue() + "\n");
     });
        return sb.toString();
}

-- DTO 사용 (별도의 Data 클래스를 만들어서 사용, key 와 value 가 어느정도 정해져 있음, Request 에서 많이 사용)
public class memberDTO {
    private String name;
    private String email;
    private String organization;
}

@GetMapping(value="request3")
public String getRequestParam3(MemberDTO memberDTO) {
    return memberDTO.toString();
}

-- POST API
- 리소스를 추가하기 위하여 사용 되는 API, @PostMapping --> POST API 를 제작하기 위하여 사용 되는 어노테이션 @RequestMapping + POST method 의 조합
- 일반적으로 추가하고자 하는 Resource 를 http body 에 추가하여 서버에 요청
- 그렇기에 @RequestBody 를 이용하여 Body 에 있는 값을 받아야 함

-- Swagger 사용 이유
-- Swagger 는 협업을 위하여 필요한 라이브러리
-- Swagger 란 서버로 요청되는 API 리스트를 html 화면으로 문서화하여 테스트 할 수 있는 라이브러리
-- 이 라이브러리는 서버가 가동되면서 @RestController 를 읽어 API 를 분석하여 html 문서를 작성함
-- Swagger 필요 이유 : REST API 의 스펙을 문서화 하는 것은 매우  중요
-- API 를 변경 할 때 마다 Reference 하는 문서를 계속 바꿔야 하는 불편함이 있음

-- Swagger 설정 방법
-- @Configuration : 어노테이션 기반의 환경 구성을 돕는 어노테이션
                    IoC Container 에게 해당 클래스를 Bean 구성 Class 임을 알려줌
-- @Bean : 개발자가 직접 제어가 불가능한 외부 라이브러리 등을 Bean 으로 만들 경우에 사용

-- Put API : 해당 리소스가 존재하면 갱신하고, 리소스가 없을 경우에는 새로 생성 해 주는 api
-- Delete API : 서버를 통해 리소스를 삭제 하기 위해 사용되는 API
                (일반적으로 @PathVariable 을 통해 리소스 ID 등을 받아 처리)

-- Response Entity : Spring Framework 에서 제공하는 클래스 중 HttpEntity 라는 클래스를 상속받아 사용 하는 클래스
                     사용자의 HttpRequest 에 대한 응답 데이터를 포함
(포함하는 클래스 : HttpStatus / HttpHeaders / HttpBody)

-- Lombok : 롬복은 반복되는 메서드를 Annotation 을 사용하여 자동으로 작성해 주는 라이브러리, 일반적으로 VO, DTO, Model, Entity 등의 데이터 클래스에서 주로 사용됨
-- Lombok 대표적인 어노테이션
@NoArgsContructor : 파라미터가 없는 생성자를 생성,
@AllArgsContructor : 모든 필드 값을 파라미터로 갖는 생성자를 생성,
@RequiredArgsConstructor : 필드 값 중 final 이나 @NotNull 인 값을 갖는 생성자를 생성
@ToString : toString 메서더를 자동으로 생성해주는 기능
@ToString(exclude="") exclude 속성을 사용하여 특정 필드를 toString 필드에 나오지 않도록 설정
@EqualsAndHashCode : equals, hashCode 메서드를 자동으로 생성 equals : 두 객체의 내용이 같은지 동등성 (equality) 를 비교하는 연산자
hashCode : 두 객체가 같은 객체인지 동일성(identity) 를 비교하는 연산자
callSuper 속성을 통해 메서드 생성시 부모 클래스의 필드까지 고려할지 여부 설정 가능
- callSuper = ture -> 부모 클래스 필드 값들도 동일한지 체크

-- Entity : 데이터 베이스에 쓰을 컬럼과 여러 엔티티 간의 연관 관계를 정의, 데이터 베이스의 테으블을 하나의 엔티티로 생각해도 무방
            실제 데이터 베이스의 테이블과 1:1 로 맵핑이 됨, 이 클래스의 필드는 각 테이블 내부의 컬럼(column) 을 의미

-- Repository : Entity 에 의해 생성된 데이터베이스 접근하는 메서드를 사용하기 위한 인터페이스, Service 와 DB 를 연결 하는 고리의 역할을 수행
                데이터베이스에 적용하고자 하는 CRUD 를 정의하는 영역

-- DAO (Data Access Object) : 데이터베이스 접근하는 객체를 의미 (Persistence Layer) Service 가 DB 에 연결할 수 있게 해주는 역할, DB 를 사용하여 데이터를 조회 하거나 조작하는 기능을 전담
-- DTO (Data Transfer Object) : DTO 는 VO(Value Object) 라고 불리기도 하며, 계층간 데이터 교환을 위한 객체를 의미 VO 의 경우 Read Only 의 개념을 가지고 있음

-- ORM (Object Relational Mapping) : 어플리케이션 객체와 관계형 데이터베이스의 데이터를 자동으로 맵핑 해 주는 의미
-- Java 의 데이터 클래스와 관게형 데이터베이스의 테이블을 맵핑
-- 객체지향 프로그래밍과 관게형 데이터 베이스의 차이로 발생한느 제약 사항을 해결해 주는 역할을 수행
-- 대표적으로 JPA, Hibernate, 등이 있음 (Persistence API)
-- ORM 의 장점 SQL 쿼리가 아닌 직관적인 코드로 데이터를 조작할 수 있음 - 개발자가 보다 비즈니스 로직에 집중할 수 있음
-- 재사용 및 유지보수가 편리, DBMS에 대한 종속성이 줄어듦

-- ORM 의 단점 : 복잡성이 커질 경우 ORM 만으로 구현하기 어려움
-- 잘못 구현 할 경우 속도 저하 발생, 대형 쿼리는 별도의 튜닝이 필요할 수 있음

-- JPA (Java Persistence API) - JPA 는 ORM 과 관련된 인터페이스의 모음
-- Java 진영에서 표준 ORM 으로 채택되어 있음
-- ORM 이 큰 개념이라고 하면 JPA 는 더 구체화 시킨 스펙을 포함

-- Hibernate : ORM Framework 중 하나 JPA 의 실제 구현체 중 하나이며, 현재 JPA 구현체 중 가장많이 사용됨

-- Spring Data JPA - Spring Framework 에서 jpa 를 편리하게 사용할 수 있게 지원하는 라이브러리 (CRUD 처리 용 인터페이스제공)

-- Logback : Logback 이란 Lg4j 를 기반으로 개발된 로깅 (Logging) 라이브러리
log4j에 비해 약 10배 정도 빠른 퍼포먼스, 메모리 효율성 증대

-- 출시 순서 : log4j -> logback -> log4j2
-- Logback 특징 : 로그에 특정 레벨을 설정할 수 있음
(Trace -> Debug -> Info -> Warn -> Error)
-- 실운영과 테스트 상황에서 각각 다른 출력 레벨을 설정하여 로그를 확인할 수 있음
-- 출력 방식에 대해 설정할 수 있음, 설정 파일을 일정 시간 마다 스캔하여 어플리케이션 중단 없이 설정 변경 가능
-- 별도의 프로그램 없이 자체적으로 로그 압축을 지원, 로그 보관 기간 설정 가능

-- Logback 설정 : 일반적으로 Classpath 에 있는 logback 설정 파일을 참조하게 됨
-- Java Legacy, Spring 의 경우에는 logback.xml 파일을 참좀
-- Spring boot 의 경우에는 logback-spring.xml 파일을 참조

-- Logback 설정파일 형식 (Pattern / Appender / Encoder /Root 영역)
-- Appender : Log 의 형태 및 어디에 출력할 지 설정하기 위한영역
-- Console Appender : 콘솔에 로그를 출력 , File Appender : 파일에 로그를 저장 / RollingFileAppender : 여러 개의 파일을 순회하며 로그를 저장 / SMTPAppender : 로그를 메일로 보냄
-- DBAppender : 데이터베이스에 로그를 저장
-- root 태그 사용시 전역 설정이며 지역 설정은 logger 태그를 사용

-- LOG LEVEL
-- TRACE (DEBUG 레벨보다 더 디테일한 메세지 표현) -> DEBUG (어플리케이션의 디버깅을 위한 메세지 레벨) -> INFO (상태 변경과 같은 정보성 메세지) -> WARN (시스템 에러의 원인이 될 수 있는 경고 레벨 처리 가능한 사항) -> ERROR (로직 수행 중 오류가 발생한 경우)

-- Validation (유효성 검사) : 서비스의 비즈니시 로직이 올바르게 동작하기 위해 사용되는 데이터데 대한 검증
(유효성 검사 혹은 데이터 검증 이라고 함)
-- 일반적인 Validation 의 문제젬 : 일반적인 어플리케이션에서 사용되던 Validation 방식은 몇가지 문제가 존재 (코드의 중복이 심함, 어플리케이션 전체적으로 분산되어 존재 ...)

-- Java 에서는 Bean Validation / Hibernation Validator 를 제공
-- Validation 관련 어노테이션 (@Size, @NotNull, @NotEmpty, @NotBlank, @Pastm @PastorPresent ... @Max, @Min ...)

-- SpringBoot 예외 처리 (Java Exception / Custom Exception)
-- 스프링 부트의 예외 처리 방식은 크게 2가지가 존재 - @ControllerAdvice 를 통한 모든 Controller 에서 발생할 수 있는 예외 처리
-- @ExceptionHandler 를 통한 특정 Controller 의 예외 처리
-- 예외 클래스 : 모든 예외 클래스는 Throwable 클래스를 상속 받고 있음 (Exception 은 수 많은 자식 클래스가 있음)
-- RuntimeException 은 UncheckedException (실행 중 단계) 이며 그 외 는 모두 Checked Exception (컴파일 단계) 임

-- Custom Exception
-- HttpStatus 를 이용하여 표현 HttpStatus 는 Enum 임 (Enum 은 상수들을 모아서 Symbolic 하게 표현)

-- RestTemplate : 스프링에서 제공하는 http 통신 기능을 쉽게 사용할 수 있게 설계되어있는 템플릿
-- HTTP 서버와의 통신을 단순화하고 RESTful 원칙을 지킴, 동기 방식으로 처리되며 비동기 방식으로는 asyncRestTempalte 이 있음

-- TDD (애자일 개발 방식 중 하나 - 코드 설계 시 원하는 단계적 목표에 대하여 대해 설정하여 진행하고자 하는 것에 대한 결정 방향의 갭을 줄이고자 함)
-- JUnit : 테스트 주도 개발이라는 의미를 가짐, 테스트를 먼저 설계 및 구축 후 테스트를 통과할 수 있는 코드를 짜는 것
-- 테스트 코드 작성 목적 : 코드의 안정성 높일 수 있음, 기능을 추가 하거나 변경하는 과정에서 발생할 수 있는 Side-Effect 를 줄일 수 있음, 해당 코드가 작성된 목적을 명확하게 표현이 가능
-- 코드에 불필요한 내용이 들어가는 것을 비교적 줄일 수 있음
-- JUnit : Java 진영의 대표적인 Test Framework, 단위 테스트(Unit Test) : 코드의 특정 모듈이 의도댄 대로 동작하는지 테스트 하는 절차, 모든 함수와 메서드에 대한 각각의 테스트 케이스를 작성하는 것
-- Annotation 을 기반으로 테스트를 지원, Assert(단정문) 으로 테스트 케이스의 기대값에 대해 수행 결과를 확인이 가능JUni5 는 크게 Jupiter, Platform, Vintage 모듈로 구성이 됨

Jupiter - TestEngine API 구현체로 Junit5 를 구현하고 있음,
JUnut Platform - Test 를 실행하기 위한 뼈대, Test 를 발견하고 테스트 계획을 생성하는 TestEngine 인터페이스를 가지고 있음, TestEngin 을 통해 Test 를 발견하고 수행 및 결과를 보고함
JUnit Vintage - TestEngine API 구현체로 Junit3, 4 를 구현하고 있음
JUNit 은 Lify Cycle 이 있음, @Test : 테스트용 메서드를 표한하는 어노테이션, @BeforEach - 각 테스트 메서드가 시작되기 전 실행 되어야 하는 메서드
@AfterEach : 각 테스트 메서드가 시작된 후 실행되어야 하는 메서드, @BeforeAll : 테스트 시작 전에 실행되어야 하는 메서드 (static 처리 필요), @AfterAll : 테스트 후 전 실행되어야 하는 메서드 (static 처리 필요)
-- 통합 테스트 : 통합 테스트는 여러 기능을 조합하여 전체 비즈니스 로직이 제대로 동작하는지 확인 하는 것을 의미, @SpringBootTest 어노테이션을 사용하여 진행
-- 단위 테스트 FIRST 원칙이 중요 (Fast, Independant, Repeatable, Self-Validating, Timely)

-- Test Coverage
코드 커버리지 - 소프트웨어의 테스트 수준이 충분한 지 표현할 수 있는 지표 중 하나, 테스트를 진행했을 때 해당 코드가 실행되었는 지를 표현하는 방법,

-- Jacoco : Java 코드의 커버리지를 체크하는 라이브러리, 작성된 코드의 Test Coverage 를 측정하는 도구, Runtime 으로 TestCase 를 실행하여 Coverage 를 체크하는 방식으로 사용이 됨
테스트 코드를 통해 테스트를 실행하고 그 결과를 html, xml, csv 등의 형식으로 Report 를 제공
-- Jacoco 를 사용하기 위아혀서는 pom.xml 에 설정 값 을 입력해주어야 함, Excution prepare-agent/ merge : 여러 실행 데이터 파일들을 하나로 통합하는 명령어 / report : 하나의 프로젝트 테스트에 대한 Code Coverage 리포트를 생성하는 명령어
check : Code Coverage Metric 이 충돌하는 지 확인하는 명령어,

-- Jacoco 와 Maven Life Cycle - Maven LifeCylce (compilte -> test -> package -> install -> deploy)
Jacoco 플러그인은 Maven 라이프 사이클에 의해 동작 하며, test phase 이후에 측정이 가능함

-- Spring 과 SpringBoot 차이 (Spring - 정확한 표현은 Spring Framework)
-- DI / IoC / AOP 가 가장 중요한 요소 --> 위 요소들을 통하여 Loose Coupling (느슨한 결합) 달성이 가능
-- 의존성 주입 (DI - Dependency Injection)
ex) Test a = new Test(); 라는 new 키워드를 사용하지 않고 (DI 를 사용하지 않은 코드 - Reference 를 사용하는 방법)
의존성 주입을 사용하지 않은 코드는 new 라는 키워드를 사용 시 결합도가 올라가게 됨, 단위 테스트 사용 시 Mock 객체를 사용하지 못하게 됨
@Autowired 를 사용 시 DI 를 주입 하여 사용을 함, 위와 같이 작성시 Mock 객체로 대체하여 쉽게 테스트가 가능

-- AOP : Spring Framework 에서 제공하는 기능 중 하나
OOP 를 보완하는 수단, 여러 곳에 쓰이는 공통 기능을 모듈화하여 필요한 곳에 연결함으로써 유지보수 또는 재사용에 용이하도록 함
AOP 를 통해 기존 프로젝트에 다양한 기능을 로직 수정 없이 추가할 수 있음, 이런 개발 방식을 통해 결합도를 낮춘 개발이 가능

-- Spring 에 많이 사용되는 대표적인 모듈 (Spring JDBC / Spring MVC / Spring AOP / Spring ORM / Spring Test / Spring Expression Language (SPEL))
-- 스프링은 다양한 기능을 제공하지만, 그 기능을 사용하기 위한 설정에 많은 시간이 걸림
-- 스프링 부트는 (Auto Configuration) 을 이용 , 어플리케이션 개발에 필요한 모든 디펜던시를 프레임 워크에서 관리, jar 파일이 클래스 패스에 있는 경우 SpringBoot 는 Dispatcher Servlet 으로 구성이 됨

-- 단축 URL :

-- MappedSuperclass : 여러 엔티티 객체에서 사용되는 공통 속성이 존재할 경우가 많음
공통적으로 사용되는 속성은 대표 적으로 id, createdAt, updatedAt 등 이 있음
공통되는 속성을 별도의 클래스로 구분하여 @MappedSuperclass 를 선언한 후 사용
코드 상 분리되어 있는 것이며, 데이터베이스의 테이블 개념에서는 분리되어 있지는 않음

-- Auditing : JPA 에서 Auditiing 은 각 엔티티 별로 언제 누가 접근을 하였는 지 기록하여 감시 체계를 꾸리는 것을 의미
예) 언제 데이터가 생성 되었는 지, 누가 데이터를 생성 하였는 지, 언제 데이터가 변경되었는 지 등

-- JPA Auditing : 필연적으로 @EntityListner 어노테이션을 사용하게 됨,
-- @EntityListner 의 파라미터로 콜백을 요청할 클래스를 지정항 사용
-- @EntityListner 의 요청 시점 - @PostLoad, @PrePersist, @PostPersist, @PreUpdate, @PostUpdate, @PreUpdate, @PostRemove
-- JPA Auditing Annotation : @CreatedDate, @CreatedBy, @LastModifiedDate, @LastMdofiedBy

-- Springboot 쿼리 메서드 : JPQL : Java Persistence Query Language 의 줄임말 / 테이블이 아닌 엔티티 객체를 대상으로 사용되는 객체지향 쿼리
-- 쿼리 메서드는 Spring Data JPA 의 핵심 기능, JpaRepository 에서 제공하는 기본 메서드 만으로는 비즈니스 로직을 처리하는 데 한계가 있음
-- 이름을 짓는 것에는 특별한 규칙이 존재 (네이밍 컨벤션) 규칙에 맞게 이름을 지으면 그에 맞는 쿼리가 자동 생성이 됨

-- 쿼리 메서드 크게 Subject 와 Predicate 로 구분이 됨 find...By .. exist..By (리턴 타입 boolean) 와 같은 키워드로 주제를 정하며 by 는 서술어의 시작을 나타냄
-- 쿼리 메서드의 조건자 키워드 Is 값의 일치를 위한 조건자 키워드 Euqals 키워드와 동일한 기능을 수행, Is 가 기본 Default 값이라 보통 생략을 많이 함

-- 정렬과 페이징 (Paging)
-- 일반적인 쿼리문을 작성할 떄 정렬을 사용하기 위하여서는 ORDER BY 문을 사용, 특정 컬럼을 기준으로 오름차순 또는 내림차순으로 정렬된 레코드 목록을 응답을 받음
-- 쿼리 메서드에서 정렬 처리 쿼리 메서드에서는 메서드의 이름으로 정렬 처리를 할 수 있음 / ASC : 오름 차순, DESC : 내림 차순

-- 페이징 : 페이징 처리를 하면 리턴 타입으로 Page 를 설정하고 매개변수로 Pageable 객체를 사용

-- 쿼리 어노테이션 : 쿼리메서드를 통해 쿼리를 생성하는 방식은 조건이 많아 질숡 메서드의 이름이 기렁져 비효율적
-- Query Annotation 은 Spring Data JPA 에서 제공하는 기능으로 JPQL 을 사용하여 쿼리를 작성
-- @Query(SELECT * FROM Product p WHERE p.price >= 2000 ) 식으로 작성
-- 쿼리 어노테이션이 붙는 순간부터는 메서드 명명은 상관이 없음 (쿼리 어노테이션에 파라미터를 넣는것도 가능
-- @Query(SELECT p FROM Product p WHERE p.price > ?1) ?1 에 첫번째 파라미터 대입을 가능

-- 프로퍼티 암호화 : (application.properties Encryption), Jasypt는 개발자가 암호화 작동 방식에 대한 깊은 지식이 없이도
최소한의 노력으로 자신의 프로젝트에 기본 암호화 기능을 추가할 수 있는 라이브러리, 간편하게 단방향 및 양방향 암호화 기술을 제공, 쓰레드로부터 안전 함 (스프링같은 싱글톤 환경에서 동기화 걱정 없이 사용할 수 있음)





