1. 빌드 관리 도구
                 - 빌드 관리 도구란 프로젝트에서 필요한 xml, properties, jar 파일들을 자동으로
                   인식하여 빌드해주는 도구
                 - 소스 코드를 컴파일, 테스트, 정적 분석 등을 하여 실행 가능한 앱으로 빌드를 해 줌
                 - 프로젝트 정보 관리, 테스트 빌드, 배포 등의 작업을 진행 해 줌
                 - 외부 라이브러리를 참조하여 자동으로 다운로드 및 업데이트의 관리를 해 줌
                 - 자바의 대표적인 빌드 도구 : Ant, Maven, Gradle

                 (1) Maven
                 자바의 대표적인 관리 도구 였던  Ant 를 대체하기 위해 개발 됨
                 프로젝트의 외부 라이브러리를 쉽게 참조할 수 있게 pom.xml 파일료 명시하여 관리
                 참조한 외부 라이브러리에 연관된 다른 라이브러리도 자동으로 관리됨

                 - Maven 사용 이유 : 기존에 사용하던 Ant 는 빌드의 기능만 가지고 있음
  자동으로 라이브러리를 관리해주는 기능이 추가 된 Maven 을 사용
  다운받아 사용하던 라이브러리에 변동 사항이 있으면 자동으로 업데이트 하여 적용이 됨

- Ant : XML 기반의 스크립트, 자유로운 빌드 단위 지정, 간단하고 사용하기 쉬음, 대규모 프로젝트에서 복잡해지는 경향이 있음, 라이프 사이클이 ㅇ벗음
- Maven : XML 기반의 스크립트, 라이브 사이클 도입, pom.xml 로 편하게 Dependency 관리

- Maven 간단 사용법 : pom.xml 파일을 활용하여 빌드 및 관리
- pom.xml 의 역할 : (1) 프로젝트 정보 관리 (2) 해당 프로젝트에서 사용하는 외부 라이브러리 관리 (3) 해당 프로젝트의 빌드 관련 설정

(2) Maven Tag
- modelVersion : maven 버전을 의미
- groupId : 프로젝트 그룹 id 를 뜻하며, 일반적으로 대표하는 사이트 도메인을 역순으로 적어 사용
- artifactId : groupId 외 에 다른 프로젝트와는 구분될 수 있는 프로젝트의 id 를 작성
- version : 프로젝트의 버전을 의미하며 개발 단계에 따라 구분하여 작성
- name : 프로젝트의 이름
- description : 해당 프로젝트의 간략한 설명을 작성
- properties : pom.xml 파일 내에서 빈번하게 사용되는 중복 상수를 정의하는 영역
                해당 영역의 상수를 사용하기 위해서는 ${태그명} 의 형태로 사용하면 됨
- dependencies : 해당 프로젝트에서 의존성을 가지고 사용하는 라이브러리를 정의하는 영영
                  각 라이브러리마다 <dependency> 태그를 사용하여 구분
- build : 프로젝트 빌드와 관련된 정보를 설정하는 영역

(3) Gradle
- Groovy 스크립트를 활용한 빌드 관리 도구
- 안드로이드 프로젝트의 표준 빌드 시스템으로 채택
- 멀티 프로젝트 (Multi-Project) 의 빌드에 최적화 하여 설계됨
- Maven 에 비해 더 빠른 처리속도를 가지고 있음
- Meven 에 비해 더 간결한 구성이 가능

(4) Gradle 과 Maven 비교
- Gradle 에 비해 Maven 이 점유율이 더 높은 상황 (점차 Gradle 점유율 오르는 중)
- Gradle 에 비해 Maven의 성능이 떨어짐
- Maven 에 비해 Gradle아 대규모 프로젝트에서의 성능이 좋음
- Maven : pom.xml, Gradle : build.gradle
- Gradle 은 설치 없이 사용 할 수 있다. (Gradle Wrapper)

(5) Gradle 의 대표 용어
repositories : 라이브러리가 저장된 위치 등 설정
mavenCentral : 기본 Maven Repository
dependencies : 라이브러리 사용을 위한 의존성 설정

(6) 디자인 패턴 : 특정 문맥에서 공통 적으로 발생하는 문제에 대해 쓰이는 재사용 가능한 해결책
목적별로 일정한 패턴이 제시되어 있음
완전한 정답이 되는 알고리즘과 달리 현재 상황에 맞춰 최적화된 패턴을 결정하여 사용하는 것이 좋음
대표적으로 구체화된 디자인 패턴은 GoF (Gang of Four) 에서 제시한 총 23개의 패턴이 있음

(7) 디자인 패턴의 장점 : 개발자 간의 원활한 협업이 가능
소프트웨어의 구조를 파악하기 용이함, 재사용을 통해 개발 시간 단축, 설계 변경이 있을 경우 비교적 원할하게 조치가 가능

(8) 디자인 패턴의 단점 : 객체지향적 설계를 고려하여 진행해야 함
초기 투자 비용이 많이 들어감 (돈 뿐만 아니라 시간도 많이 들어감)

(9) 목적에 따른 분류 : 생성 패턴, 구조 패턴, 행동 패턴 등 총 3가지로 구분이 됨
각 패턴이 어떤 작업을 위해 생성되는 것인 지 에 따른 구분

- 생성 패턴 : 객체의 생성과 관련된 패턴, 특정 객체가 생성되거나 변경되어도 프로그램 구조에 영향을 최소화 할 수 있도록 유연성 제공
- 구조 패턴 : 프로그램 내 자료 구조나 인터페이스 구조 등 프로그램 구조를 설계하는데 사용되는 패턴, 클래스나 객체를 조합하여 다른 구조를 만들 수 있게 해 줌
- 행동 패턴 : 반복적으로 사용되는 객체들의 커뮤니케이션을 극대화, 객체 사이에 알고리즘 또는 책임을 분배하는 방법에 대해 정의됨, 결합도를 최소화 하는 것 이 목적

